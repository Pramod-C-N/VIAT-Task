using vita.TenantDetails;
using vita.Vendor;
using vita.Customer;
using vita.Purchase;
using vita.Credit;
using vita.Debit;
using vita.ImportBatch;
using vita.Purchase;
using vita.Sales;
using vita.MasterData;
using System;
using System.Linq;
using Abp.Organizations;
using vita.Authorization.Roles;
using vita.MultiTenancy;

namespace vita.EntityHistory
{
    public static class EntityHistoryHelper
    {
        public const string EntityHistoryConfigurationName = "EntityHistory";

        public static readonly Type[] HostSideTrackedTypes =
        {
            typeof(Module),
            typeof(Designation),
            typeof(BusinessOperationalModel),
            typeof(BusinessTurnoverSlab),
            typeof(ApportionmentBaseData),
            typeof(TenantSectors),
            typeof(TenantPurchaseVatCateory),
            typeof(TenantSupplyVATCategory),
            typeof(TenantBusinessSupplies),
            typeof(TenantBusinessPurchase),
            typeof(TenantDocuments),
            typeof(TenantAddress),
            typeof(TenantShareHolders),
            typeof(TenantBasicDetails),
            typeof(Activecurrency),
            typeof(BatchData),
            typeof(VendorSectorDetail),
            typeof(VendorTaxDetails),
            typeof(VendorForeignEntity),
            typeof(VendorOwnershipDetails),
            typeof(VendorDocuments),
            typeof(VendorContactPerson),
            typeof(VendorAddress),
            typeof(Vendors),
            typeof(CustomerSectorDetail),
            typeof(CustomerTaxDetails),
            typeof(CustomerForeignEntity),
            typeof(CustomerOwnershipDetails),
            typeof(CustomerDocuments),
            typeof(CustomerContactPerson),
            typeof(CustomerAddress),
            typeof(Customers),
            typeof(ImportBatchData),
            typeof(PurchaseEntryParty),
            typeof(PurchaseEntrySummary),
            typeof(PurchaseEntryPaymentDetail),
            typeof(PurchaseEntryItem),
            typeof(PurchaseEntryVATDetail),
            typeof(PurchaseEntryDiscount),
            typeof(PurchaseEntryContactPerson),
            typeof(PurchaseEntryAddress),
            typeof(PurchaseEntry),
            typeof(IRNMaster),
            typeof(CreditNoteParty),
            typeof(CreditNoteSummary),
            typeof(CreditNotePaymentDetail),
            typeof(CreditNoteItem),
            typeof(CreditNoteVATDetail),
            typeof(CreditNoteDiscount),
            typeof(CreditNoteContactPerson),
            typeof(CreditNoteAddress),
            typeof(CreditNote),
            typeof(DebitNoteParty),
            typeof(DebitNoteSummary),
            typeof(DebitNotePaymentDetail),
            typeof(DebitNoteItem),
            typeof(DebitNoteVATDetail),
            typeof(DebitNoteDiscount),
            typeof(DebitNoteContactPerson),
            typeof(DebitNoteAddress),
            typeof(DebitNote),
            typeof(InvoiceType),
            typeof(FinancialYear),
            typeof(ErrorType),
            typeof(HeadOfPayment),
            typeof(Currency),
            typeof(TaxCategory),
            typeof(InvoiceCategory),
            typeof(ErrorGroup),
            typeof(Affiliation),
            typeof(PlaceOfPerformance),
            typeof(OrganisationType),
            typeof(PurchaseType),
            typeof(AllowanceReason),
            typeof(UnitOfMeasurement),
            typeof(NatureofServices),
            typeof(ExemptionReason),
            typeof(ReasonCNDN),
            typeof(DocumentMaster),
            typeof(PaymentMeans),
            typeof(BusinessProcess),
            typeof(TaxSubCategory),
            typeof(Country),
            typeof(SalesInvoicePaymentDetail),
            typeof(SalesInvoiceVATDetail),
            typeof(SalesInvoiceDiscount),
            typeof(SalesInvoiceContactPerson),
            typeof(SalesInvoiceAddress),
            typeof(SalesInvoiceParty),
            typeof(TransactionCategory),
            typeof(Constitution),
            typeof(TenantType),
            typeof(Sector),
            typeof(Gender),
            typeof(SalesInvoiceItem),
            typeof(SalesInvoice),
            typeof(Title),
            typeof(OrganizationUnit), typeof(Role), typeof(Tenant)
        };

        public static readonly Type[] TenantSideTrackedTypes =
        {
            typeof(Designation),
            typeof(BusinessOperationalModel),
            typeof(BusinessTurnoverSlab),
            typeof(ApportionmentBaseData),
            typeof(TenantSectors),
            typeof(TenantPurchaseVatCateory),
            typeof(TenantSupplyVATCategory),
            typeof(TenantBusinessSupplies),
            typeof(TenantBusinessPurchase),
            typeof(TenantDocuments),
            typeof(TenantAddress),
            typeof(TenantShareHolders),
            typeof(TenantBasicDetails),
            typeof(Activecurrency),
            typeof(BatchData),
            typeof(VendorSectorDetail),
            typeof(VendorTaxDetails),
            typeof(VendorForeignEntity),
            typeof(VendorOwnershipDetails),
            typeof(VendorDocuments),
            typeof(VendorContactPerson),
            typeof(VendorAddress),
            typeof(Vendors),
            typeof(CustomerSectorDetail),
            typeof(CustomerTaxDetails),
            typeof(CustomerForeignEntity),
            typeof(CustomerOwnershipDetails),
            typeof(CustomerDocuments),
            typeof(CustomerContactPerson),
            typeof(CustomerAddress),
            typeof(Customers),
            typeof(ImportBatchData),
            typeof(PurchaseEntryParty),
            typeof(PurchaseEntrySummary),
            typeof(PurchaseEntryPaymentDetail),
            typeof(PurchaseEntryItem),
            typeof(PurchaseEntryVATDetail),
            typeof(PurchaseEntryDiscount),
            typeof(PurchaseEntryContactPerson),
            typeof(PurchaseEntryAddress),
            typeof(PurchaseEntry),
            typeof(IRNMaster),
            typeof(CreditNoteParty),
            typeof(CreditNoteSummary),
            typeof(CreditNotePaymentDetail),
            typeof(CreditNoteItem),
            typeof(CreditNoteVATDetail),
            typeof(CreditNoteDiscount),
            typeof(CreditNoteContactPerson),
            typeof(CreditNoteAddress),
            typeof(CreditNote),
            typeof(DebitNoteParty),
            typeof(DebitNoteSummary),
            typeof(DebitNotePaymentDetail),
            typeof(DebitNoteItem),
            typeof(DebitNoteVATDetail),
            typeof(DebitNoteDiscount),
            typeof(DebitNoteContactPerson),
            typeof(DebitNoteAddress),
            typeof(DebitNote),
            typeof(InvoiceType),
            typeof(FinancialYear),
            typeof(ErrorType),
            typeof(HeadOfPayment),
            typeof(Currency),
            typeof(TaxCategory),
            typeof(InvoiceCategory),
            typeof(ErrorGroup),
            typeof(Affiliation),
            typeof(PlaceOfPerformance),
            typeof(OrganisationType),
            typeof(PurchaseType),
            typeof(AllowanceReason),
            typeof(UnitOfMeasurement),
            typeof(NatureofServices),
            typeof(ExemptionReason),
            typeof(ReasonCNDN),
            typeof(DocumentMaster),
            typeof(PaymentMeans),
            typeof(BusinessProcess),
            typeof(TaxSubCategory),
            typeof(Country),
            typeof(SalesInvoicePaymentDetail),
            typeof(SalesInvoiceVATDetail),
            typeof(SalesInvoiceDiscount),
            typeof(SalesInvoiceContactPerson),
            typeof(SalesInvoiceAddress),
            typeof(SalesInvoiceParty),
            typeof(TransactionCategory),
            typeof(Constitution),
            typeof(TenantType),
            typeof(Sector),
            typeof(Gender),
            typeof(SalesInvoiceItem),
            typeof(SalesInvoice),
            typeof(Title),
            typeof(OrganizationUnit), typeof(Role)
        };

        public static readonly Type[] TrackedTypes =
            HostSideTrackedTypes
                .Concat(TenantSideTrackedTypes)
                .GroupBy(type => type.FullName)
                .Select(types => types.First())
                .ToArray();
    }
}